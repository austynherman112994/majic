{
  "version": 4,
  "terraform_version": "1.9.5",
  "serial": 161,
  "lineage": "4655accb-fdb3-faab-fb4c-3b532733671a",
  "outputs": {},
  "resources": [
    {
      "module": "module.cert-manager",
      "mode": "managed",
      "type": "helm_release",
      "name": "cert_manager",
      "provider": "provider[\"registry.terraform.io/hashicorp/helm\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "atomic": false,
            "chart": "cert-manager",
            "cleanup_on_fail": false,
            "create_namespace": false,
            "dependency_update": false,
            "description": null,
            "devel": null,
            "disable_crd_hooks": false,
            "disable_openapi_validation": false,
            "disable_webhooks": false,
            "force_update": false,
            "id": "cert-manager",
            "keyring": null,
            "lint": false,
            "manifest": null,
            "max_history": 0,
            "metadata": [
              {
                "app_version": "v1.16.1",
                "chart": "cert-manager",
                "first_deployed": 1728692856,
                "last_deployed": 1728692856,
                "name": "cert-manager",
                "namespace": "sunstrike",
                "notes": "\ncert-manager v1.16.1 has been deployed successfully!\n\nIn order to begin issuing certificates, you will need to set up a ClusterIssuer\nor Issuer resource (for example, by creating a 'letsencrypt-staging' issuer).\n\nMore information on the different types of issuers and how to configure them\ncan be found in our documentation:\n\nhttps://cert-manager.io/docs/configuration/\n\nFor information on how to configure cert-manager to automatically provision\nCertificates for Ingress resources, take a look at the `ingress-shim`\ndocumentation:\n\nhttps://cert-manager.io/docs/usage/ingress/\n",
                "revision": 1,
                "values": "{\"crds\":{\"enabled\":true}}",
                "version": "v1.16.1"
              }
            ],
            "name": "cert-manager",
            "namespace": "sunstrike",
            "pass_credentials": false,
            "postrender": [],
            "recreate_pods": false,
            "render_subchart_notes": true,
            "replace": false,
            "repository": "https://charts.jetstack.io",
            "repository_ca_file": null,
            "repository_cert_file": null,
            "repository_key_file": null,
            "repository_password": null,
            "repository_username": null,
            "reset_values": false,
            "reuse_values": false,
            "set": [],
            "set_list": [],
            "set_sensitive": [],
            "skip_crds": false,
            "status": "deployed",
            "timeout": 600,
            "upgrade_install": true,
            "values": [
              "crds:\n    enabled: true\n"
            ],
            "verify": false,
            "version": "v1.16.1",
            "wait": false,
            "wait_for_jobs": false
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "repository_password"
              }
            ]
          ],
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "module.kubernetes.kubernetes_namespace.sunstrike_namespace"
          ]
        }
      ]
    },
    {
      "module": "module.grafana",
      "mode": "managed",
      "type": "helm_release",
      "name": "grafana",
      "provider": "provider[\"registry.terraform.io/hashicorp/helm\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "atomic": false,
            "chart": "grafana",
            "cleanup_on_fail": false,
            "create_namespace": false,
            "dependency_update": false,
            "description": null,
            "devel": null,
            "disable_crd_hooks": false,
            "disable_openapi_validation": false,
            "disable_webhooks": false,
            "force_update": false,
            "id": "grafana",
            "keyring": null,
            "lint": false,
            "manifest": null,
            "max_history": 0,
            "metadata": [
              {
                "app_version": "11.2.1",
                "chart": "grafana",
                "first_deployed": 1728692857,
                "last_deployed": 1728692857,
                "name": "grafana",
                "namespace": "sunstrike",
                "notes": "1. Get your 'admin' user password by running:\n\n   kubectl get secret --namespace sunstrike grafana -o jsonpath=\"{.data.admin-password}\" | base64 --decode ; echo\n\n\n2. The Grafana server can be accessed via port 80 on the following DNS name from within your cluster:\n\n   grafana.sunstrike.svc.cluster.local\n\n   Get the Grafana URL to visit by running these commands in the same shell:\n     export POD_NAME=$(kubectl get pods --namespace sunstrike -l \"app.kubernetes.io/name=grafana,app.kubernetes.io/instance=grafana\" -o jsonpath=\"{.items[0].metadata.name}\")\n     kubectl --namespace sunstrike port-forward $POD_NAME 3000\n\n3. Login with the password from step 1 and the username: admin\n#################################################################################\n######   WARNING: Persistence is disabled!!! You will lose your data when   #####\n######            the Grafana pod is terminated.                            #####\n#################################################################################\n",
                "revision": 1,
                "values": "{\"dashboardProviders\":{\"dashboardproviders.yaml\":{\"apiVersion\":1,\"providers\":[{\"disableDeletion\":true,\"editable\":true,\"folder\":\"Pulsar\",\"name\":\"pulsar\",\"options\":{\"path\":\"/var/lib/grafana/dashboards/pulsar\"},\"orgId\":1,\"type\":\"file\"}]}},\"dashboards\":{\"pulsar\":{\"bookkeeper\":{\"datasource\":\"Prometheus\",\"url\":\"https://raw.githubusercontent.com/streamnative/apache-pulsar-grafana-dashboard/master/dashboards.kubernetes/bookkeeper.json\"},\"broker\":{\"datasource\":\"Prometheus\",\"url\":\"https://raw.githubusercontent.com/streamnative/apache-pulsar-grafana-dashboard/master/dashboards.kubernetes/broker.json\"},\"connector_sink\":{\"datasource\":\"Prometheus\",\"url\":\"https://raw.githubusercontent.com/streamnative/apache-pulsar-grafana-dashboard/master/dashboards.kubernetes/connector_sink.json\"},\"connector_source\":{\"datasource\":\"Prometheus\",\"url\":\"https://raw.githubusercontent.com/streamnative/apache-pulsar-grafana-dashboard/master/dashboards.kubernetes/connector_source.json\"},\"container\":{\"datasource\":\"Prometheus\",\"url\":\"https://raw.githubusercontent.com/streamnative/apache-pulsar-grafana-dashboard/master/dashboards.kubernetes/container.json\"},\"functions\":{\"datasource\":\"Prometheus\",\"url\":\"https://raw.githubusercontent.com/streamnative/apache-pulsar-grafana-dashboard/master/dashboards.kubernetes/functions.json\"},\"jvm\":{\"datasource\":\"Prometheus\",\"url\":\"https://raw.githubusercontent.com/streamnative/apache-pulsar-grafana-dashboard/master/dashboards.kubernetes/jvm.json\"},\"loadbalance\":{\"datasource\":\"Prometheus\",\"url\":\"https://raw.githubusercontent.com/streamnative/apache-pulsar-grafana-dashboard/master/dashboards.kubernetes/loadbalance.json\"},\"messaging\":{\"datasource\":\"Prometheus\",\"url\":\"https://raw.githubusercontent.com/streamnative/apache-pulsar-grafana-dashboard/master/dashboards.kubernetes/messaging.json\"},\"node\":{\"datasource\":\"Prometheus\",\"url\":\"https://raw.githubusercontent.com/streamnative/apache-pulsar-grafana-dashboard/master/dashboards.kubernetes/node.json\"},\"overview\":{\"datasource\":\"Prometheus\",\"url\":\"https://raw.githubusercontent.com/streamnative/apache-pulsar-grafana-dashboard/master/dashboards.kubernetes/overview.json\"},\"proxy\":{\"datasource\":\"Prometheus\",\"url\":\"https://raw.githubusercontent.com/streamnative/apache-pulsar-grafana-dashboard/master/dashboards.kubernetes/proxy.json\"},\"recovery\":{\"datasource\":\"Prometheus\",\"url\":\"https://raw.githubusercontent.com/streamnative/apache-pulsar-grafana-dashboard/master/dashboards.kubernetes/recovery.json\"},\"topic\":{\"datasource\":\"Prometheus\",\"url\":\"https://raw.githubusercontent.com/streamnative/apache-pulsar-grafana-dashboard/master/dashboards.kubernetes/topic.json\"},\"transaction\":{\"datasource\":\"Prometheus\",\"url\":\"https://raw.githubusercontent.com/streamnative/apache-pulsar-grafana-dashboard/master/dashboards.kubernetes/transaction.json\"},\"zookeeper\":{\"datasource\":\"Prometheus\",\"url\":\"https://raw.githubusercontent.com/streamnative/apache-pulsar-grafana-dashboard/master/dashboards.kubernetes/zookeeper-3.6.json\"}}}}",
                "version": "8.5.2"
              }
            ],
            "name": "grafana",
            "namespace": "sunstrike",
            "pass_credentials": false,
            "postrender": [],
            "recreate_pods": false,
            "render_subchart_notes": true,
            "replace": false,
            "repository": "https://grafana.github.io/helm-charts",
            "repository_ca_file": null,
            "repository_cert_file": null,
            "repository_key_file": null,
            "repository_password": null,
            "repository_username": null,
            "reset_values": false,
            "reuse_values": false,
            "set": [],
            "set_list": [],
            "set_sensitive": [],
            "skip_crds": false,
            "status": "deployed",
            "timeout": 600,
            "upgrade_install": true,
            "values": [
              "dashboardProviders:\n    dashboardproviders.yaml:\n        apiVersion: 1\n        providers:\n            - name: 'pulsar'\n              orgId: 1\n              folder: 'Pulsar'\n              type: file\n              disableDeletion: true\n              editable: true\n              options:\n                  path: /var/lib/grafana/dashboards/pulsar\ndashboards:\n    pulsar:\n        # Download the maintained dashboards from AL 2.0 licenced repo https://github.com/streamnative/apache-pulsar-grafana-dashboard\n        bookkeeper:\n            url: https://raw.githubusercontent.com/streamnative/apache-pulsar-grafana-dashboard/master/dashboards.kubernetes/bookkeeper.json\n            datasource: Prometheus\n        broker:\n            url: https://raw.githubusercontent.com/streamnative/apache-pulsar-grafana-dashboard/master/dashboards.kubernetes/broker.json\n            datasource: Prometheus\n        connector_sink:\n            url: https://raw.githubusercontent.com/streamnative/apache-pulsar-grafana-dashboard/master/dashboards.kubernetes/connector_sink.json\n            datasource: Prometheus\n        connector_source:\n            url: https://raw.githubusercontent.com/streamnative/apache-pulsar-grafana-dashboard/master/dashboards.kubernetes/connector_source.json\n            datasource: Prometheus\n        container:\n            url: https://raw.githubusercontent.com/streamnative/apache-pulsar-grafana-dashboard/master/dashboards.kubernetes/container.json\n            datasource: Prometheus\n        functions:\n            url: https://raw.githubusercontent.com/streamnative/apache-pulsar-grafana-dashboard/master/dashboards.kubernetes/functions.json\n            datasource: Prometheus\n        jvm:\n            url: https://raw.githubusercontent.com/streamnative/apache-pulsar-grafana-dashboard/master/dashboards.kubernetes/jvm.json\n            datasource: Prometheus\n        loadbalance:\n            url: https://raw.githubusercontent.com/streamnative/apache-pulsar-grafana-dashboard/master/dashboards.kubernetes/loadbalance.json\n            datasource: Prometheus\n        messaging:\n            url: https://raw.githubusercontent.com/streamnative/apache-pulsar-grafana-dashboard/master/dashboards.kubernetes/messaging.json\n            datasource: Prometheus\n        node:\n            url: https://raw.githubusercontent.com/streamnative/apache-pulsar-grafana-dashboard/master/dashboards.kubernetes/node.json\n            datasource: Prometheus\n        overview:\n            url: https://raw.githubusercontent.com/streamnative/apache-pulsar-grafana-dashboard/master/dashboards.kubernetes/overview.json\n            datasource: Prometheus\n        proxy:\n            url: https://raw.githubusercontent.com/streamnative/apache-pulsar-grafana-dashboard/master/dashboards.kubernetes/proxy.json\n            datasource: Prometheus\n        recovery:\n            url: https://raw.githubusercontent.com/streamnative/apache-pulsar-grafana-dashboard/master/dashboards.kubernetes/recovery.json\n            datasource: Prometheus\n        topic:\n            url: https://raw.githubusercontent.com/streamnative/apache-pulsar-grafana-dashboard/master/dashboards.kubernetes/topic.json\n            datasource: Prometheus\n        transaction:\n            url: https://raw.githubusercontent.com/streamnative/apache-pulsar-grafana-dashboard/master/dashboards.kubernetes/transaction.json\n            datasource: Prometheus\n        zookeeper:\n            url: https://raw.githubusercontent.com/streamnative/apache-pulsar-grafana-dashboard/master/dashboards.kubernetes/zookeeper-3.6.json\n            datasource: Prometheus\n"
            ],
            "verify": false,
            "version": "8.5.2",
            "wait": false,
            "wait_for_jobs": false
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "repository_password"
              }
            ]
          ],
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "module.kubernetes.kubernetes_namespace.sunstrike_namespace"
          ]
        }
      ]
    },
    {
      "module": "module.kubernetes",
      "mode": "managed",
      "type": "kubernetes_namespace",
      "name": "sunstrike_namespace",
      "provider": "module.kubernetes.provider[\"registry.terraform.io/hashicorp/kubernetes\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "sunstrike",
            "metadata": [
              {
                "annotations": {},
                "generate_name": "",
                "generation": 0,
                "labels": {},
                "name": "sunstrike",
                "resource_version": "503",
                "uid": "5a1b8818-efdc-4ca3-a18b-31d7544366e5"
              }
            ],
            "timeouts": null
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiZGVsZXRlIjozMDAwMDAwMDAwMDB9fQ=="
        }
      ]
    },
    {
      "module": "module.loki",
      "mode": "managed",
      "type": "helm_release",
      "name": "loki",
      "provider": "provider[\"registry.terraform.io/hashicorp/helm\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "atomic": false,
            "chart": "loki",
            "cleanup_on_fail": false,
            "create_namespace": false,
            "dependency_update": false,
            "description": null,
            "devel": null,
            "disable_crd_hooks": false,
            "disable_openapi_validation": false,
            "disable_webhooks": false,
            "force_update": false,
            "id": "loki",
            "keyring": null,
            "lint": false,
            "manifest": null,
            "max_history": 0,
            "metadata": [
              {
                "app_version": "3.1.1",
                "chart": "loki",
                "first_deployed": 1728692855,
                "last_deployed": 1728692855,
                "name": "loki",
                "namespace": "sunstrike",
                "notes": "***********************************************************************\n Welcome to Grafana Loki\n Chart version: 6.16.0\n Chart Name: loki\n Loki version: 3.1.1\n***********************************************************************\n\n** Please be patient while the chart is being deployed **\n\nTip:\n\n  Watch the deployment status using the command: kubectl get pods -w --namespace sunstrike\n\nIf pods are taking too long to schedule make sure pod affinity can be fulfilled in the current cluster.\n\n***********************************************************************\nInstalled components:\n***********************************************************************\n* loki\n\nLoki has been deployed as a single binary.\nThis means a single pod is handling reads and writes. You can scale that pod vertically by adding more CPU and memory resources.\n\n\n***********************************************************************\nSending logs to Loki\n***********************************************************************\n\nLoki has been configured with a gateway (nginx) to support reads and writes from a single component.\n\nYou can send logs from inside the cluster using the cluster DNS:\n\nhttp://loki-gateway.sunstrike.svc.cluster.local/loki/api/v1/push\n\nYou can test to send data from outside the cluster by port-forwarding the gateway to your local machine:\n\n  kubectl port-forward --namespace sunstrike svc/loki-gateway 3100:80 \u0026\n\nAnd then using http://127.0.0.1:3100/loki/api/v1/push URL as shown below:\n\n```\ncurl -H \"Content-Type: application/json\" -XPOST -s \"http://127.0.0.1:3100/loki/api/v1/push\"  \\\n--data-raw \"{\\\"streams\\\": [{\\\"stream\\\": {\\\"job\\\": \\\"test\\\"}, \\\"values\\\": [[\\\"$(date +%s)000000000\\\", \\\"fizzbuzz\\\"]]}]}\"\n```\n\nThen verify that Loki did received the data using the following command:\n\n```\ncurl \"http://127.0.0.1:3100/loki/api/v1/query_range\" --data-urlencode 'query={job=\"test\"}' | jq .data.result\n```\n\n***********************************************************************\nConnecting Grafana to Loki\n***********************************************************************\n\nIf Grafana operates within the cluster, you'll set up a new Loki datasource by utilizing the following URL:\n\nhttp://loki-gateway.sunstrike.svc.cluster.local/\n",
                "revision": 1,
                "values": "{\"backend\":{\"replicas\":0},\"deploymentMode\":\"SingleBinary\",\"loki\":{\"auth_enabled\":false,\"commonConfig\":{\"replication_factor\":1},\"limits_config\":{\"allow_structured_metadata\":true},\"schemaConfig\":{\"configs\":[{\"from\":\"2024-01-01\",\"index\":{\"period\":\"24h\",\"prefix\":\"loki_index_\"},\"object_store\":\"filesystem\",\"schema\":\"v13\",\"store\":\"tsdb\"}]},\"storage\":{\"type\":\"filesystem\"}},\"read\":{\"replicas\":0},\"singleBinary\":{\"replicas\":1},\"write\":{\"replicas\":0}}",
                "version": "6.16.0"
              }
            ],
            "name": "loki",
            "namespace": "sunstrike",
            "pass_credentials": false,
            "postrender": [],
            "recreate_pods": false,
            "render_subchart_notes": true,
            "replace": false,
            "repository": "https://grafana.github.io/helm-charts",
            "repository_ca_file": null,
            "repository_cert_file": null,
            "repository_key_file": null,
            "repository_password": null,
            "repository_username": null,
            "reset_values": false,
            "reuse_values": false,
            "set": [],
            "set_list": [],
            "set_sensitive": [],
            "skip_crds": false,
            "status": "deployed",
            "timeout": 600,
            "upgrade_install": true,
            "values": [
              "deploymentMode: SingleBinary\nloki:\n    limits_config:\n        allow_structured_metadata: true\n    auth_enabled: false\n    commonConfig:\n        replication_factor: 1\n    storage:\n        type: 'filesystem'\n    schemaConfig:\n        configs:\n            - from: \"2024-01-01\"\n              store: tsdb\n              index:\n                  prefix: loki_index_\n                  period: 24h\n              object_store: filesystem # we're storing on filesystem so there's no real persistence here.\n              schema: v13\nsingleBinary:\n    replicas: 1\nread:\n    replicas: 0\nbackend:\n    replicas: 0\nwrite:\n    replicas: 0\n\n\n\n"
            ],
            "verify": false,
            "version": "6.16.0",
            "wait": false,
            "wait_for_jobs": false
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "repository_password"
              }
            ]
          ],
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "module.kubernetes.kubernetes_namespace.sunstrike_namespace"
          ]
        }
      ]
    },
    {
      "module": "module.otel",
      "mode": "managed",
      "type": "helm_release",
      "name": "otel_collector",
      "provider": "provider[\"registry.terraform.io/hashicorp/helm\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "atomic": false,
            "chart": "opentelemetry-collector",
            "cleanup_on_fail": false,
            "create_namespace": false,
            "dependency_update": false,
            "description": null,
            "devel": null,
            "disable_crd_hooks": false,
            "disable_openapi_validation": false,
            "disable_webhooks": false,
            "force_update": false,
            "id": "otel-collector",
            "keyring": null,
            "lint": false,
            "manifest": null,
            "max_history": 0,
            "metadata": [
              {
                "app_version": "0.111.0",
                "chart": "opentelemetry-collector",
                "first_deployed": 1728692904,
                "last_deployed": 1728692904,
                "name": "otel-collector",
                "namespace": "sunstrike",
                "notes": "\n\n\n\n[WARNING] No resource limits or requests were set. Consider setter resource requests and limits for your collector(s) via the `resources` field.\n\n[WARNING] \"useGOMEMLIMIT\" is enabled but memory limits have not been supplied so the GOMEMLIMIT env var could not be added. Solve this problem by setting resources.limits.memory or disabling useGOMEMLIMIT\n\n",
                "revision": 1,
                "values": "{\"config\":{\"exporters\":{\"otlphttp\":{\"endpoint\":\"http://loki.sunstrike:3100/otlp\",\"tls\":{\"insecure\":true}}},\"service\":{\"pipelines\":{\"logs\":{\"exporters\":[\"otlphttp\"]}}}},\"image\":{\"repository\":\"otel/opentelemetry-collector-k8s\"},\"mode\":\"deployment\",\"presets\":{\"clusterMetrics\":{\"enabled\":true},\"kubeletMetrics\":{\"enabled\":true},\"kubernetesAttributes\":{\"enabled\":true},\"logsCollection\":{\"enabled\":true}}}",
                "version": "0.108.0"
              }
            ],
            "name": "otel-collector",
            "namespace": "sunstrike",
            "pass_credentials": false,
            "postrender": [],
            "recreate_pods": false,
            "render_subchart_notes": true,
            "replace": false,
            "repository": "https://open-telemetry.github.io/opentelemetry-helm-charts",
            "repository_ca_file": null,
            "repository_cert_file": null,
            "repository_key_file": null,
            "repository_password": null,
            "repository_username": null,
            "reset_values": false,
            "reuse_values": false,
            "set": [],
            "set_list": [],
            "set_sensitive": [],
            "skip_crds": false,
            "status": "deployed",
            "timeout": 600,
            "upgrade_install": true,
            "values": [
              "mode: deployment\n\nimage:\n    repository: otel/opentelemetry-collector-k8s\n\npresets:\n    # enables the k8sclusterreceiver and adds it to the metrics pipelines\n    clusterMetrics:\n        enabled: true\n    # enables the k8sattributesprocessor and adds it to the traces, metrics, and logs pipelines\n    kubernetesAttributes:\n        enabled: true\n    # enables the kubeletstatsreceiver and adds it to the metrics pipelines\n    kubeletMetrics:\n        enabled: true\n    # Enables the filelogreceiver and adds it to the logs pipelines\n    logsCollection:\n        enabled: true\n\nconfig:\n    exporters:\n        otlphttp:\n            endpoint: http://loki.sunstrike:3100/otlp\n            tls:\n                insecure: true\n    service:\n        pipelines:\n            logs:\n                exporters: [otlphttp]\n\n"
            ],
            "verify": false,
            "version": "0.108.0",
            "wait": false,
            "wait_for_jobs": false
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "repository_password"
              }
            ]
          ],
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "module.cert-manager.helm_release.cert_manager",
            "module.kubernetes.kubernetes_namespace.sunstrike_namespace",
            "module.otel.helm_release.otel_operator"
          ]
        }
      ]
    },
    {
      "module": "module.otel",
      "mode": "managed",
      "type": "helm_release",
      "name": "otel_operator",
      "provider": "provider[\"registry.terraform.io/hashicorp/helm\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "atomic": false,
            "chart": "opentelemetry-operator",
            "cleanup_on_fail": false,
            "create_namespace": false,
            "dependency_update": false,
            "description": null,
            "devel": null,
            "disable_crd_hooks": false,
            "disable_openapi_validation": false,
            "disable_webhooks": false,
            "force_update": false,
            "id": "otel-operator",
            "keyring": null,
            "lint": false,
            "manifest": null,
            "max_history": 0,
            "metadata": [
              {
                "app_version": "0.110.0",
                "chart": "opentelemetry-operator",
                "first_deployed": 1728692900,
                "last_deployed": 1728692900,
                "name": "otel-operator",
                "namespace": "sunstrike",
                "notes": "\n\nopentelemetry-operator has been installed. Check its status by running:\n  kubectl --namespace sunstrike get pods -l \"release=otel-operator\"\n\nVisit https://github.com/open-telemetry/opentelemetry-operator for instructions on how to create \u0026 configure OpenTelemetryCollector and Instrumentation custom resources by using the Operator.\n",
                "revision": 1,
                "values": "{\"manager\":{\"collectorImage\":{\"repository\":\"otel/opentelemetry-collector-k8s\"}}}",
                "version": "0.71.0"
              }
            ],
            "name": "otel-operator",
            "namespace": "sunstrike",
            "pass_credentials": false,
            "postrender": [],
            "recreate_pods": false,
            "render_subchart_notes": true,
            "replace": false,
            "repository": "https://open-telemetry.github.io/opentelemetry-helm-charts",
            "repository_ca_file": null,
            "repository_cert_file": null,
            "repository_key_file": null,
            "repository_password": null,
            "repository_username": null,
            "reset_values": false,
            "reuse_values": false,
            "set": [],
            "set_list": [],
            "set_sensitive": [],
            "skip_crds": false,
            "status": "deployed",
            "timeout": 600,
            "upgrade_install": true,
            "values": [
              "manager:\n    collectorImage:\n        repository: \"otel/opentelemetry-collector-k8s\"\n"
            ],
            "verify": false,
            "version": "0.71.0",
            "wait": false,
            "wait_for_jobs": false
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "repository_password"
              }
            ]
          ],
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "module.cert-manager.helm_release.cert_manager",
            "module.kubernetes.kubernetes_namespace.sunstrike_namespace"
          ]
        }
      ]
    },
    {
      "module": "module.pulsar",
      "mode": "managed",
      "type": "helm_release",
      "name": "pulsar",
      "provider": "provider[\"registry.terraform.io/hashicorp/helm\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "atomic": false,
            "chart": "pulsar",
            "cleanup_on_fail": false,
            "create_namespace": false,
            "dependency_update": false,
            "description": null,
            "devel": null,
            "disable_crd_hooks": false,
            "disable_openapi_validation": false,
            "disable_webhooks": false,
            "force_update": false,
            "id": "pulsar",
            "keyring": null,
            "lint": false,
            "manifest": null,
            "max_history": 0,
            "metadata": [
              {
                "app_version": "3.0.6",
                "chart": "pulsar",
                "first_deployed": 1728692854,
                "last_deployed": 1728692854,
                "name": "pulsar",
                "namespace": "sunstrike",
                "notes": "1. Get the application URL by running these commands:\n  export POD_NAME=$(kubectl get pods --namespace sunstrike -l \"app.kubernetes.io/name=prometheus-node-exporter,app.kubernetes.io/instance=pulsar\" -o jsonpath=\"{.items[0].metadata.name}\")\n  echo \"Visit http://127.0.0.1:9100 to use your application\"\n  kubectl port-forward --namespace sunstrike $POD_NAME 9100\n1. Get your 'admin' user password by running:\n\n   kubectl get secret --namespace sunstrike pulsar-grafana -o jsonpath=\"{.data.admin-password}\" | base64 --decode ; echo\n\n\n2. The Grafana server can be accessed via port 80 on the following DNS name from within your cluster:\n\n   pulsar-grafana.sunstrike.svc.cluster.local\n\n   Get the Grafana URL to visit by running these commands in the same shell:\n     export POD_NAME=$(kubectl get pods --namespace sunstrike -l \"app.kubernetes.io/name=grafana,app.kubernetes.io/instance=pulsar\" -o jsonpath=\"{.items[0].metadata.name}\")\n     kubectl --namespace sunstrike port-forward $POD_NAME 3000\n\n3. Login with the password from step 1 and the username: admin\n#################################################################################\n######   WARNING: Persistence is disabled!!! You will lose your data when   #####\n######            the Grafana pod is terminated.                            #####\n#################################################################################\n\nkube-prometheus-stack has been installed. Check its status by running:\n  kubectl --namespace sunstrike get pods -l \"release=pulsar\"\n\nVisit https://github.com/prometheus-operator/kube-prometheus for instructions on how to create \u0026 configure Alertmanager and Prometheus instances using the Operator.\n\nkube-state-metrics is a simple service that listens to the Kubernetes API server and generates metrics about the state of the objects.\nThe exposed metrics can be found here:\nhttps://github.com/kubernetes/kube-state-metrics/blob/master/docs/README.md#exposed-metrics\n\nThe metrics are exported on the HTTP endpoint /metrics on the listening port.\nIn your case, pulsar-kube-state-metrics.sunstrike.svc.cluster.local:8080/metrics\n\nThey are served either as plaintext or protobuf depending on the Accept header.\nThey are designed to be consumed either by Prometheus itself or by a scraper that is compatible with scraping a Prometheus client endpoint.\n\nThank you for installing Apache Pulsar Helm chart version 3.5.0.\n\n!! WARNING !!\n\nImportant Security Disclaimer for Apache Pulsar Helm Chart Usage:\n\nThis Helm chart is provided with a default configuration that does not\nmeet the security requirements for production environments or sensitive\ndata handling. Users are strongly advised to thoroughly review and\ncustomize the security settings to ensure a secure deployment that\naligns with their specific operational and security policies.\n\nGo to https://github.com/apache/pulsar-helm-chart for more details.\n\nAsk usage questions at https://github.com/apache/pulsar/discussions/categories/q-a\nReport issues to https://github.com/apache/pulsar-helm-chart/issues\nPlease contribute improvements to https://github.com/apache/pulsar-helm-chart\n\n",
                "revision": 1,
                "values": "{\"affinity\":{\"anti_affinity\":false},\"bookkeeper\":{\"configData\":{\"dbStorage_readAheadCacheMaxSizeMb\":\"32\",\"dbStorage_rocksDB_blockCacheSize\":\"8388608\",\"dbStorage_rocksDB_writeBufferSizeMB\":\"8\",\"dbStorage_writeCacheMaxSizeMb\":\"32\"},\"replicaCount\":1},\"broker\":{\"configData\":{\"autoSkipNonRecoverableData\":\"true\",\"managedLedgerDefaultAckQuorum\":\"1\",\"managedLedgerDefaultEnsembleSize\":\"1\",\"managedLedgerDefaultWriteQuorum\":\"1\"},\"replicaCount\":1},\"components\":{\"autorecovery\":false,\"pulsar_manager\":true},\"proxy\":{\"replicaCount\":1},\"volumes\":{\"persistence\":false},\"zookeeper\":{\"replicaCount\":1}}",
                "version": "3.5.0"
              }
            ],
            "name": "pulsar",
            "namespace": "sunstrike",
            "pass_credentials": false,
            "postrender": [],
            "recreate_pods": false,
            "render_subchart_notes": true,
            "replace": false,
            "repository": "https://pulsar.apache.org/charts",
            "repository_ca_file": null,
            "repository_cert_file": null,
            "repository_key_file": null,
            "repository_password": null,
            "repository_username": null,
            "reset_values": false,
            "reuse_values": false,
            "set": [],
            "set_list": [],
            "set_sensitive": [],
            "skip_crds": false,
            "status": "deployed",
            "timeout": 600,
            "upgrade_install": true,
            "values": [
              "#\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#   http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n#\n\n## deployed withh emptyDir\nvolumes:\n  persistence: false\n\n# disabled AntiAffinity\naffinity:\n  anti_affinity: false\n\n# disable auto recovery\ncomponents:\n  autorecovery: false\n  pulsar_manager: true\n\nzookeeper:\n  replicaCount: 1\n\nbookkeeper:\n  replicaCount: 1\n  configData:\n    # minimal memory use for bookkeeper\n    # https://bookkeeper.apache.org/docs/reference/config#db-ledger-storage-settings\n    dbStorage_writeCacheMaxSizeMb: \"32\"\n    dbStorage_readAheadCacheMaxSizeMb: \"32\"\n    dbStorage_rocksDB_writeBufferSizeMB: \"8\"\n    dbStorage_rocksDB_blockCacheSize: \"8388608\"\n\nbroker:\n  replicaCount: 1\n  configData:\n    ## Enable `autoSkipNonRecoverableData` since bookkeeper is running\n    ## without persistence\n    autoSkipNonRecoverableData: \"true\"\n    # storage settings\n    managedLedgerDefaultEnsembleSize: \"1\"\n    managedLedgerDefaultWriteQuorum: \"1\"\n    managedLedgerDefaultAckQuorum: \"1\"\n\nproxy:\n  replicaCount: 1\n"
            ],
            "verify": false,
            "version": "3.5.0",
            "wait": false,
            "wait_for_jobs": false
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "repository_password"
              }
            ]
          ],
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "module.kubernetes.kubernetes_namespace.sunstrike_namespace",
            "module.pulsar.null_resource.pulsar_init"
          ]
        }
      ]
    },
    {
      "module": "module.pulsar",
      "mode": "managed",
      "type": "null_resource",
      "name": "pulsar_init",
      "provider": "provider[\"registry.terraform.io/hashicorp/null\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "4708059715454179213",
            "triggers": null
          },
          "sensitive_attributes": [],
          "dependencies": [
            "module.kubernetes.kubernetes_namespace.sunstrike_namespace"
          ]
        }
      ]
    },
    {
      "module": "module.redis",
      "mode": "managed",
      "type": "helm_release",
      "name": "redis",
      "provider": "provider[\"registry.terraform.io/hashicorp/helm\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "atomic": false,
            "chart": "redis",
            "cleanup_on_fail": false,
            "create_namespace": false,
            "dependency_update": false,
            "description": null,
            "devel": null,
            "disable_crd_hooks": false,
            "disable_openapi_validation": false,
            "disable_webhooks": false,
            "force_update": false,
            "id": "redis",
            "keyring": null,
            "lint": false,
            "manifest": null,
            "max_history": 0,
            "metadata": [
              {
                "app_version": "7.4.1",
                "chart": "redis",
                "first_deployed": 1728764501,
                "last_deployed": 1728764501,
                "name": "redis",
                "namespace": "sunstrike",
                "notes": "CHART NAME: redis\nCHART VERSION: 20.2.0\nAPP VERSION: 7.4.1\n\n** Please be patient while the chart is being deployed **\n\nRedis\u0026reg; can be accessed on the following DNS names from within your cluster:\n\n    redis-master.sunstrike.svc.cluster.local for read/write operations (port 6379)\n    redis-replicas.sunstrike.svc.cluster.local for read-only operations (port 6379)\n\n\n\nTo get your password run:\n\n    export REDIS_PASSWORD=$(kubectl get secret --namespace sunstrike redis -o jsonpath=\"{.data.redis-password}\" | base64 -d)\n\nTo connect to your Redis\u0026reg; server:\n\n1. Run a Redis\u0026reg; pod that you can use as a client:\n\n   kubectl run --namespace sunstrike redis-client --restart='Never'  --env REDIS_PASSWORD=$REDIS_PASSWORD  --image docker.io/bitnami/redis:7.4.1-debian-12-r0 --command -- sleep infinity\n\n   Use the following command to attach to the pod:\n\n   kubectl exec --tty -i redis-client \\\n   --namespace sunstrike -- bash\n\n2. Connect using the Redis\u0026reg; CLI:\n   REDISCLI_AUTH=\"$REDIS_PASSWORD\" redis-cli -h redis-master\n   REDISCLI_AUTH=\"$REDIS_PASSWORD\" redis-cli -h redis-replicas\n\nTo connect to your database from outside the cluster execute the following commands:\n\n    kubectl port-forward --namespace sunstrike svc/redis-master 6379:6379 \u0026\n    REDISCLI_AUTH=\"$REDIS_PASSWORD\" redis-cli -h 127.0.0.1 -p 6379\n\nWARNING: There are \"resources\" sections in the chart not set. Using \"resourcesPreset\" is not recommended for production. For production installations, please set the following values according to your workload needs:\n  - replica.resources\n  - master.resources\n+info https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                "revision": 1,
                "values": "{}",
                "version": "20.2.0"
              }
            ],
            "name": "redis",
            "namespace": "sunstrike",
            "pass_credentials": false,
            "postrender": [],
            "recreate_pods": false,
            "render_subchart_notes": true,
            "replace": false,
            "repository": "oci://registry-1.docker.io/bitnamicharts/",
            "repository_ca_file": null,
            "repository_cert_file": null,
            "repository_key_file": null,
            "repository_password": null,
            "repository_username": null,
            "reset_values": false,
            "reuse_values": false,
            "set": [],
            "set_list": [],
            "set_sensitive": [],
            "skip_crds": false,
            "status": "deployed",
            "timeout": 600,
            "upgrade_install": true,
            "values": [
              ""
            ],
            "verify": false,
            "version": "20.2.0",
            "wait": false,
            "wait_for_jobs": false
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "repository_password"
              }
            ]
          ],
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "module.cert-manager.helm_release.cert_manager",
            "module.kubernetes.kubernetes_namespace.sunstrike_namespace"
          ]
        }
      ]
    }
  ],
  "check_results": null
}
